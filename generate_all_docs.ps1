#!/usr/bin/env pwsh

# Complete Documentation Generator for Design Patterns App
# Generates PlantUML diagrams, pattern graphs, and Dart docs

param(
    [string]$DiagramsPath = "docs/diagrams",
    [string]$OutputPath = "docs/generated", 
    [string]$Format = "svg"
)

Write-Host "üöÄ Generating complete documentation..." -ForegroundColor Green

# Create directories if they don't exist
if (-not (Test-Path $DiagramsPath)) { New-Item -Path $DiagramsPath -ItemType Directory -Force }
if (-not (Test-Path $OutputPath)) { New-Item -Path $OutputPath -ItemType Directory -Force }

# Function to generate individual pattern diagram
function Generate-PatternDiagram {
    param($PatternName, $PatternType, $Description)
    
    $pumlFile = "$DiagramsPath/$PatternName.puml"
    $pumlContent = @"
@startuml $PatternName
!theme vibrant
skinparam backgroundColor transparent
skinparam classBackgroundColor #E8F5E8
skinparam classBorderColor #2E7D32

title $PatternName Pattern - Tower Defense Context
note top : $Description

' Pattern implementation will be auto-generated based on context
' This is a template - actual content generated by AI

@enduml
"@
    
    $pumlContent | Out-File -FilePath $pumlFile -Encoding UTF8
    Write-Host "üìÑ Generated: $pumlFile" -ForegroundColor Cyan
}

# Auto-generate pattern diagrams for each category
Write-Host "üìä Generating Pattern Diagrams..." -ForegroundColor Yellow

# Creational Patterns
Generate-PatternDiagram "FactoryMethod" "Creational" "Enemy and Tower Creation System"
Generate-PatternDiagram "AbstractFactory" "Creational" "Game Element Families (Towers + Projectiles)"
Generate-PatternDiagram "Builder" "Creational" "Map and Evolution Tree Construction"
Generate-PatternDiagram "Prototype" "Creational" "Tower Configuration Cloning"
Generate-PatternDiagram "Singleton" "Creational" "GameManager Instance Control"

# Structural Patterns  
Generate-PatternDiagram "Adapter" "Structural" "Legacy Tower Compatibility"
Generate-PatternDiagram "Bridge" "Structural" "Logic and Rendering Separation"
Generate-PatternDiagram "Composite" "Structural" "Map Hierarchy (Walls, House, Path)"
Generate-PatternDiagram "Decorator" "Structural" "Tower and Projectile Upgrades"
Generate-PatternDiagram "Facade" "Structural" "Game Engine Simplified Interface"
Generate-PatternDiagram "Proxy" "Structural" "Resource Lazy Loading"

# Behavioral Patterns
Generate-PatternDiagram "ChainOfResponsibility" "Behavioral" "Damage Effect Chain Processing"
Generate-PatternDiagram "Command" "Behavioral" "Player Actions and Upgrades"
Generate-PatternDiagram "Mediator" "Behavioral" "Game Component Communication"
Generate-PatternDiagram "Memento" "Behavioral" "Save/Load Game State"
Generate-PatternDiagram "Observer" "Behavioral" "XP and Level Change Notifications"
Generate-PatternDiagram "State" "Behavioral" "Enemy and Player States"
Generate-PatternDiagram "Strategy" "Behavioral" "Interchangeable Behaviors"
Generate-PatternDiagram "TemplateMethod" "Behavioral" "Game Turn Flow Template"

# Generate all PlantUML diagrams
Write-Host "üé® Converting PlantUML to images..." -ForegroundColor Yellow
Get-ChildItem "$DiagramsPath/*.puml" | ForEach-Object {
    $inputFile = $_.FullName
    $outputFile = "$OutputPath/$($_.BaseName).$Format"
    
    Write-Host "  Converting: $($_.Name)" -ForegroundColor Gray
    node-plantuml $inputFile -o $outputFile -f $Format
    
    if (Test-Path $outputFile) {
        Write-Host "  ‚úÖ Generated: $outputFile" -ForegroundColor Green
    } else {
        Write-Host "  ‚ùå Failed: $outputFile" -ForegroundColor Red
    }
}

# Generate architecture overview
Write-Host "üèóÔ∏è Generating Architecture Diagrams..." -ForegroundColor Yellow
$archPuml = "$DiagramsPath/Architecture_Overview.puml"
$architectureContent = @"
@startuml Architecture_Overview
!theme vibrant

package "Presentation Layer" <<Rectangle>> {
    [Pages] <<UI>>
    [Widgets] <<UI>>  
    [State Management] <<Logic>>
}

package "Domain Layer" <<Rectangle>> {
    [ViewModels] <<Logic>>
    [Use Cases] <<Business>>
    [Entities] <<Model>>
    [Repository Contracts] <<Interface>>
}

package "Data Layer" <<Rectangle>> {
    [Repositories] <<Implementation>>
    [Data Sources] <<External>>
    [Models] <<DTO>>
}

package "External Services" <<Cloud>> {
    [Firebase] <<Service>>
    [SQLite] <<Database>>
    [Device APIs] <<System>>
}

[Pages] --> [State Management]
[State Management] --> [ViewModels]
[ViewModels] --> [Use Cases]
[Use Cases] --> [Repository Contracts]
[Repositories] ..|> [Repository Contracts]
[Repositories] --> [Data Sources]
[Data Sources] --> [Firebase]
[Data Sources] --> [SQLite]
[Data Sources] --> [Device APIs]

note right of [State Management] : Creational: MVC\nStructural: MVP\nBehavioral: MVVM-C\nGlobal: MVVM

@enduml
"@

$architectureContent | Out-File -FilePath $archPuml -Encoding UTF8
node-plantuml $archPuml -o "$OutputPath/Architecture_Overview.$Format" -f $Format

# Generate Dart documentation
Write-Host "üìö Generating Dart API Documentation..." -ForegroundColor Yellow
try {
    dart doc --output docs/api
    Write-Host "‚úÖ Dart documentation generated" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è  Dart doc generation skipped (run from project root)" -ForegroundColor Yellow
}

# Summary
Write-Host "`n‚úÖ Documentation generation complete!" -ForegroundColor Green
Write-Host "üìÇ Pattern diagrams: $OutputPath" -ForegroundColor Cyan
Write-Host "üìä Total diagrams generated: $(Get-ChildItem "$OutputPath/*.$Format" | Measure-Object | Select-Object -ExpandProperty Count)" -ForegroundColor Cyan
Write-Host "üìö API docs: docs/api/index.html" -ForegroundColor Cyan
